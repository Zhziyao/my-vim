" [Setting: listchars]
" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬
" Invisible character colors 
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

" [Tabs and Spaces]
" If you prefer to work with tab characters then it is a good idea to ensure that tabstop == softtabstop
" If you prefer to work with spaces, then it is preferable to ensure that softtabstop == shiftwidth
" Set tabstop, softtabstop and shiftwidth to the same value
" NOTE:To invoke this command :Stab<CR>
" If you hit enter without providing a value, then the tab settings are not affected.
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction

" [Whitespace preferences and Filetypes]
" Different file types may require particular whitespace settings.
" These preferences can be specified by hooking into the FileType event with an autocommand.
" Only do this part when compiled with support for autocommands
if has("autocmd")
  " Enable file type detection
  filetype on

  " Syntax of these languages is fussy over tabs Vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

  " Customisations based on house-style (arbitrary)
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab

  " Treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss setfiletype xml
endif

" [Tidying whitespace]
" [Converting between tabs and spaces]
" More specifically, to convert tabs to spaces, run:
:set expandtab
:retab!
" And to convert spaces to tabs, run:
:set noexpandtab
:retab!
" [Strip trailing whitespace]
" throughout an entire file by running this substitution command:
:%s/\s\+$//e
" This has a couple of side-effects: it moves your cursor, and sets the last item in your search history to trailing whitespace. This function gets around these problems:
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
" If you want to map this function to a key (e.g. F5), add this:
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
" If you want to run this command automatically when a file is saved, add this:
autocmd BufWritePre *.py,*.js :call <SID>StripTrailingWhitespaces()
" You can delete all blank lines by running the following command:
:g/^$/d
" Updates:
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction 
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nmap _= :call Preserve("normal gg=G")<CR>
" The underscore key is not often used, so makes for a good alternate <leader>. The $ key is practically synonymous with end of line, so it makes for a good mnemonic.

" [Indentation commands]
nmap <D-[> <<
nmap <D-]> >>
vmap <D-[> <gv
vmap <D-]> >gv

" [Working with buffers]
:ls 	show the buffer list
:bn 	open the next buffer in the current window (cycles from the end of the list to the beginning).
:bp 	open the previous buffer in the current window (cycles from the start of the list to the end).
CTRL-^ 	switch to the alternate file
" [Dealing with hidden buffers]
:w 	save the changes to a file
:e! 	restore the original file
:bd! 	forcibly remove the buffer from the buffer list, discarding any changes
:q! 	force Vim to quit, discarding changes to all modified buffers
" By default, Vim makes it difficult to create hidden buffers. To make Vim more liberal about hidden buffers, put the following in your .vimrc:
set hidden

" [Working with windows]
ctrl-w s 	split the current window horizontally, loading the same file in the new window
ctrl-w v 	split the current window vertically, loading the same file in the new window
:sp[lit] filename 	split the current window horizontally, loading filename in the new window
:vsp[lit] filename 	split the current window vertically, loading filename in the new window
" [Closing split windows]
:q[uit] 	close the currently active window
:on[ly] 	close all windows except the currently active window
" [Changing focus between windows]
ctrl-w w 	cycle between the open windows
ctrl-w h 	focus the window to the left
ctrl-w j 	focus the window to the down
ctrl-w k 	focus the window to the up
ctrl-w l 	focus the window to the right
" mapping
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" [Resizing windows]
ctrl-w + 	increase height of current window by 1 line
ctrl-w - 	decrease height of current window by 1 line
ctrl-w _ 	maximise height of current window
ctrl-w | 	maximise width of current window
" [Moving windows]
trl-w r 	rotate all windows
ctrl-w x 	exchange current window with its neighbour
ctrl-w H 	move current window to far left
ctrl-w J 	move current window to bottom
ctrl-w K 	move current window to top
ctrl-w L 	move current window to far right

" [Working with tabs]
" [Opening & closing tabs]
:tabe[dit] filename 	Open filename in a new tab
ctrl-W T 	Move current split window into its own tab
:q 	Close window, closing tab if it contains a single window
:tabc[lose] 	Close the current tab page and all its windows
:tabo[nly] 	Close all tabs apart from the current one
" [Switching tabs]
gt 	Move to next tab
gT 	Move to previous tab
#gt 	Move to tab number #
" I’m accustomed to the tab switching shortcuts of Firefox, so to port these into my Vim environment, I include the following in my .vimrc:
" for linux and windows users (using the control key)
map <C-S-]> gt
map <C-S-[> gT
map <C-1> 1gt
map <C-2> 2gt
map <C-3> 3gt
map <C-4> 4gt
map <C-5> 5gt
map <C-6> 6gt
map <C-7> 7gt
map <C-8> 8gt
map <C-9> 9gt
map <C-0> :tablast<CR>
" [Rearranging tabs]
:tabmove 	Move current tab to the end
:tabmove 0 	Move current tab to the beginning
:tabmove 1 	Move current tab to become the 2nd tab

" [How to use tabs]

